#숫자형
# 정수
# a = 123 , type(a)를 실행하면 <class 'int'> 결과 출력 a에 123이라는 정수가 있기 때문에 int이다
a = 100 ** 100
print (a)           # int 크기에는 제한이 없다.
"정수형엔 2진수는 0B 8진수는 0O 16진수는 0X"
# 실수
#3.14 같은 소수점 있는 데이터인데 3.14e5로 표현이 가능
#  3.14e5는 3.14*10의 5승을 의미
a = 3.14
b = 3.14e5
print (a, b)

# 정수 실수 데이터 형은 사칙 연산이 가능
a = 10; b = 20
print (a+b, a-b, a*b, a/b)
# 제곱을 의미하는 **연산 나머지 구하는 %연산 소수점 버리는 // 연산 사용 가능
a, b = 9, 2
print (a **b, a%b, a//b)

# 불형 
# 참이나 거짓만 저장할 수 있는데 논리형이라고 함
a = type 
type(a)
a = (100 == 100)
b = (10 > 100)
print (a,b)

##문자열
a = "파이썬 만세"
a
print (a)
type (a)
# 큰 따움표나 작은따움표를 출력하고 싶으면 다른 따옴표로 묶으면 된다
"작은따옴표는 ' 모양이다"
'큰 따옴표는 " 모양이다.'

a = "이건 큰 따옴표 \" 모양."
b = "이건 작은따옴표 \' 모양."
print (a,b)

#문자열을 여러줄로 넣으려면 중간에 \n을 포함시키면 된다.
a = '파이썬 \n 만세'
print (a)
# 작은 따옴표나 큰 따옴표 3개를 연속해서 묶어도 된다.
a == """파이썬
만세"""
a
print(a)
## 함수 선언 부분 ##
def myFunc() :
    print ('함수를 호출함')
# 메인코드 부분
gVar = 100
if __name__ == '__main__' :
    print ('메인함수 부분이 실행됩니다.')
    myFunc()
    print ('전역 변수 값:', gVar)

#54행은 __name__ 변수에 __main__을 자동으로 설정하라는 의미이다.
#자세한건 9장에서 다룬다.

#자바처럼 코딩 하려면 54~58행을 다음과 같이 수정한다.
def main() :
    print ('메인 함수 부분이 실행됩니다.')
    myFunc()
    print ('전역 변수 값:', gVer )
if __name__ == '__main__' :
        main()

